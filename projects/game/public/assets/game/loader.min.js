!async function(){const e=["emulator.js","nipplejs.js","shaders.js","storage.js","gamepad.js","GameManager.js","socket.io.min.js","compression.js"];let o="string"==typeof window.EJS_pathtodata?window.EJS_pathtodata:(t=new URL(document.currentScript.src).pathname).substring(0,t.length-t.split("/").pop().length);var t;function a(e){return new Promise((function(t){let a=document.createElement("script");a.src="undefined"!=typeof EJS_paths&&"string"==typeof EJS_paths[e]?EJS_paths[e]:e.endsWith("emulator.min.js")?o+e:o+"src/"+e,a.onload=t,a.onerror=()=>{i(e).then((e=>t()))},document.head.appendChild(a)}))}function n(e){return new Promise((function(t){let a=document.createElement("link");a.rel="stylesheet",a.href="undefined"!=typeof EJS_paths&&"string"==typeof EJS_paths[e]?EJS_paths[e]:o+e,a.onload=t,a.onerror=()=>{i(e).then((e=>t()))},document.head.appendChild(a)}))}async function i(o){console.error("Failed to load "+o);let t=o.includes(".min.")&&!o.includes("socket");if(console[t?"warn":"error"]("Failed to load "+o+" beacuse it's likly that the minified files are missing.\nTo fix this you have 3 options:\n1. You can download the zip from the latest release here: https://github.com/EmulatorJS/EmulatorJS/releases/latest - Stable\n2. You can download the zip from here: https://cdn.emulatorjs.org/latest/data/emulator.min.zip and extract it to the data/ folder. (easiest option) - Beta\n3. You can build the files by running `npm i && npm run build` in the data/minify folder. (hardest option) - Beta\nNote: you will probably need to do the same for the cores, extract them to the data/cores/ folder."),t)if(console.log("Attempting to load non-minified files"),"emulator.min.js"===o)for(let o=0;o<e.length;o++)await a(e[o]);else await n("emulator.css")}if(o.endsWith("/")||(o+="/"),"undefined"!=typeof EJS_DEBUG_XX&&!0===EJS_DEBUG_XX){for(let o=0;o<e.length;o++)await a(e[o]);await n("emulator.css")}else await a("emulator.min.js"),await n("emulator.min.css");const d={};let w;d.gameUrl=window.EJS_gameUrl,d.dataPath=o,d.system=window.EJS_core,d.biosUrl=window.EJS_biosUrl,d.gameName=window.EJS_gameName,d.color=window.EJS_color,d.adUrl=window.EJS_AdUrl,d.adMode=window.EJS_AdMode,d.adTimer=window.EJS_AdTimer,d.adSize=window.EJS_AdSize,d.alignStartButton=window.EJS_alignStartButton,d.VirtualGamepadSettings=window.EJS_VirtualGamepadSettings,d.buttonOpts=window.EJS_Buttons,d.volume=window.EJS_volume,d.defaultControllers=window.EJS_defaultControls,d.startOnLoad=window.EJS_startOnLoaded,d.fullscreenOnLoad=window.EJS_fullscreenOnLoaded,d.filePaths=window.EJS_paths,d.loadState=window.EJS_loadStateURL,d.cacheLimit=window.EJS_CacheLimit,d.cheats=window.EJS_cheats,d.defaultOptions=window.EJS_defaultOptions,d.gamePatchUrl=window.EJS_gamePatchUrl,d.gameParentUrl=window.EJS_gameParentUrl,d.netplayUrl=window.EJS_netplayServer,d.netplayICEServers=window.EJS_netplayICEServers,d.gameId=window.EJS_gameID,d.backgroundImg=window.EJS_backgroundImage,d.backgroundBlur=window.EJS_backgroundBlur,d.backgroundColor=window.EJS_backgroundColor,d.controlScheme=window.EJS_controlScheme,d.threads=window.EJS_threads,d.disableCue=window.EJS_disableCue,d.startBtnName=window.EJS_startButtonName,d.softLoad=window.EJS_softLoad,d.capture=window.EJS_screenCapture,d.externalFiles=window.EJS_externalFiles,d.dontExtractRom=window.EJS_dontExtractRom,d.dontExtractBIOS=window.EJS_dontExtractBIOS,d.disableDatabases=window.EJS_disableDatabases,d.disableLocalStorage=window.EJS_disableLocalStorage,d.forceLegacyCores=window.EJS_forceLegacyCores,d.noAutoFocus=window.EJS_noAutoFocus,d.videoRotation=window.EJS_videoRotation,d.hideSettings=window.EJS_hideSettings,d.browserMode=window.EJS_browserMode,d.shaders=Object.assign({},window.EJS_SHADERS,window.EJS_shaders?window.EJS_shaders:{}),d.fixedSaveInterval=window.EJS_fixedSaveInterval;try{w=Intl.DateTimeFormat().resolvedOptions().locale}catch(e){}const l=["en","en-US"],r=e=>l.includes(e);if("string"==typeof window.EJS_language&&!r(window.EJS_language)||w&&!1!==window.EJS_disableAutoLang){const e=window.EJS_language||w,t=!window.EJS_language&&"string"==typeof w;try{let a,n=!1;console.log("Loading language",e),"undefined"!=typeof EJS_paths&&"string"==typeof EJS_paths[e]?a=EJS_paths[e]:(a=o+"localization/"+e+".json",(e.includes("-")||e.includes("_"))&&(n=o+"localization/"+e.split(/[-_]/)[0]+".json")),d.language=e;let i={},w=!1;if(!r(e)){if(t)try{let e=await fetch(a);if(!e.ok)throw new Error(`Missing language file: ${e.status}`);if(i=JSON.parse(await e.text()),n){let e=await fetch(n);if(w=!e.ok,!e.ok)throw new Error(`Missing language file: ${e.status}`);i={...JSON.parse(await e.text()),...i}}}catch(o){d.language=e.split(/[-_]/)[0],console.warn("Failed to load language:",e+",","trying default language:",d.language),w||(i=JSON.parse(await(await fetch(n)).text()))}else i=JSON.parse(await(await fetch(a)).text());d.langJson=i}}catch(o){console.log("Missing language:",e,"!!"),delete d.language,delete d.langJson}}window.EJS_emulator=new EmulatorJS(EJS_player,d),window.EJS_adBlocked=(e,o)=>window.EJS_emulator.adBlocked(e,o),"function"==typeof window.EJS_ready&&window.EJS_emulator.on("ready",window.EJS_ready),"function"==typeof window.EJS_onGameStart&&window.EJS_emulator.on("start",window.EJS_onGameStart),"function"==typeof window.EJS_onLoadState&&window.EJS_emulator.on("loadState",window.EJS_onLoadState),"function"==typeof window.EJS_onSaveState&&window.EJS_emulator.on("saveState",window.EJS_onSaveState),"function"==typeof window.EJS_onLoadSave&&window.EJS_emulator.on("loadSave",window.EJS_onLoadSave),"function"==typeof window.EJS_onSaveSave&&window.EJS_emulator.on("saveSave",window.EJS_onSaveSave),"function"==typeof window.EJS_onSaveUpdate&&(window.EJS_emulator.on("saveUpdate",window.EJS_onSaveUpdate),window.EJS_emulator.enableSaveUpdateEvent())}();